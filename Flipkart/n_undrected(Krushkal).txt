#include <bits/stdc++.h>
using namespace std;
struct edge{
    int a;
    int b;
    int w;
};
bool comp(edge a, edge b){
    return a.w < b.w;
}
int find(int a, int par[]){
    if(par[a]==-1) return a;
    return par[a] = find(par[a], par);
}
void merge(int a, int b, int par[]){
    par[a] = b;
}
int solve(int n, int m){
    edge arr[m];
    int par[n+1];
    for(int i=0;i<=n;i++) par[i]=-1;
    for(int i=0;i<m;i++){
        cin >> arr[i].a >> arr[i].b >> arr[i].w;
    }
    sort(arr, arr+m, comp);
    int sum =0;
    for(int i=0;i<m;i++){
        int u = find(arr[i].a, par);
        int v = find(arr[i].b, par);
        if(u!=v){
            sum +=arr[i].w;
            merge(u,v, par);
        }
        else{
            continue;
        }
    }
    return sum;
}
int main(){
    int n,k; cin >> n >> k;
    vector<int> camps(n);
    vector<int> aisles(n);
    for(int i=0;i<n;i++){
        int a,c; cin >> a >> c;
        camps[i] = a;
        aisles[i] = c;
    }
    vector<int> res;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
    for(int i=0;i<n;i++){
        int ans = solve(camps[i],aisles[i]);
        pq.push({ans,i+1});
        if(pq.size()>k)
            pq.pop();
    }
        cout << pq.top().second <<" " << pq.top().first << endl;
}