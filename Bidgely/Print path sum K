//FIND PATH- Binary Tree
#include<bits/stdc++.h>
using namespace std;

struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

TreeNode* insertLevelOrder(vector<int> arr, TreeNode* root, int i, int n)  { 
	if (i < n && arr[i] !=INT_MAX)  { 
		TreeNode* temp = new TreeNode(arr[i]); 
		root = temp; 
		root->left = insertLevelOrder(arr, root->left, 2 * i + 1, n); 
		root->right = insertLevelOrder(arr, root->right, 2 * i + 2, n); 
	} 
	return root; 
} 
void inOrder(TreeNode* root)  { 
	if (root != NULL) { 
		inOrder(root->left); 
		cout << root->val <<" "; 
		inOrder(root->right); 
	} 
} 
void printVector(const vector<int>& v, int i) { 
	for (int j=i; j<v.size(); j++) 
		cout << v[j] << " "; 
	cout << endl; 
}

void printKPathUtil(TreeNode *root, vector<int>& path,	int k) 
{ 
	if (!root) 
		return;  
	path.push_back(root->val); 
	printKPathUtil(root->left, path, k); 
	printKPathUtil(root->right, path, k); 
	int f = 0; 
	for (int j=path.size()-1; j>=0; j--) 
	{ 
		f += path[j]; 
		if (f == k) 
			printVector(path, j); 
	} 
	path.pop_back(); 
} 
void printKPath(TreeNode *root, int k) { 
	vector<int> path; 
	printKPathUtil(root, path, k); 
}  


int main() {
    string str;
    getline(cin,str);
    int sum;
    cin>>sum;
    vector<int> arr;
    
    bool negative=false;
    int num=0;
    
    for(int i=1;i<str.size()-1;i++){
        if(str[i]==','){
            negative=false;
        }
        else if(str[i]=='-'){
            negative=true;
        }
        else if(isalpha(str[i])){
            i+=4;
            arr.push_back(INT_MAX);
        }
        else if(isdigit(str[i])){
            string s="";
            while(isdigit(str[i])){
                s+=str[i];
                i++;
            }
            i--;
            num=stoi(s);
            if(negative)
                num=-num;
            arr.push_back(num);
        }
    }
    int n=arr.size();
  //  for(int i=0;i<n;i++){
 //        cout<<arr[i]<<" ";
 //   }
 //   cout<<endl;
    TreeNode* root = insertLevelOrder(arr, root, 0, n); 
//	inOrder(root); 
//	cout<<endl;
    printKPath(root, sum);
} 
