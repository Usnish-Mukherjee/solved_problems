//COUNT- Binary Tree 
#include<bits/stdc++.h>
using namespace std;

struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

TreeNode* insertLevelOrder(vector<int> arr, TreeNode* root, int i, int n)  { 
	if (i < n && arr[i] !=INT_MAX)  { 
		TreeNode* temp = new TreeNode(arr[i]); 
		root = temp; 
		root->left = insertLevelOrder(arr, root->left, 2 * i + 1, n); 
		root->right = insertLevelOrder(arr, root->right, 2 * i + 2, n); 
	} 
	return root; 
} 

int pathcount;
void getsum(TreeNode* root, int sum){//checking paths at each node.
    if(!root)return;
    if(root->val==sum){
        pathcount++;
    }
    getsum(root->left,sum-root->val);
    getsum(root->right,sum-root->val);
}
int pathSum(TreeNode* root, int& sum) {//perform simple dfs checking for each node
    if(root){
        getsum(root,sum);
        pathSum(root->left,sum);
        pathSum(root->right,sum);
    }
    return pathcount;
}

int main() {
    string str;
    getline(cin,str);
    int sum;
    cin>>sum;
    vector<int> arr;
    
    bool negative=false;
    int num=0;
    
    for(int i=1;i<str.size()-1;i++){
        if(str[i]==','){
            negative=false;
        }
        else if(str[i]=='-'){
            negative=true;
        }
        else if(isalpha(str[i])){
            i+=4;
            arr.push_back(INT_MAX);
        }
        else if(isdigit(str[i])){
            string s="";
            while(isdigit(str[i])){
                s+=str[i];
                i++;
            }
            i--;
            num=stoi(s);
            if(negative)
                num=-num;
            arr.push_back(num);
        }
    }
    int n=arr.size();
    
    TreeNode* root = insertLevelOrder(arr, root, 0, n); 
    cout<<pathSum(root, sum)<<endl;
    
} 
