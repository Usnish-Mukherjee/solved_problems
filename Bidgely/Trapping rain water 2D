//Trapping Rain Water_2 //Leetcode Discuss Sol
 int trapRainWater(vector<vector<int>>& heightMap) {
        const int m = heightMap.size();
    const int n = heightMap.front().size();
    // We need min-heap.
    priority_queue<
      pair<int, pair<int, int>>, 
      vector<pair<int, pair<int, int>>>, 
      greater<pair<int, pair<int, int>>>> q;

    // visited matrix.
    vector<vector<bool>> visited(m, vector<bool>(n, false));
    for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j)
        if (i == 0 || j == 0 || i == m - 1 || j == n - 1)
          q.push({heightMap[i][j], {i, j}}), visited[i][j] = true;
    
    vector<vector<int>> DIR = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int ans = 0;    
    while (!q.empty()) {
      auto t = q.top(); q.pop();
      auto h = t.first;
      auto [y, x] = t.second;

      for (const auto& d : DIR) {
        auto ny = y + d[0];
        auto nx = x + d[1];
        if ((ny >= 0 && ny < m && nx >= 0 && nx < n) && !visited[ny][nx]) {
          if (heightMap[ny][nx] < heightMap[y][x]) {
            ans += (heightMap[y][x] - heightMap[ny][nx]);         
            heightMap[ny][nx] = heightMap[y][x];
          }
          q.push({heightMap[ny][nx], {ny, nx}});
          visited[ny][nx] = 1;
        }
      }
    }
    return ans;
        
    }
