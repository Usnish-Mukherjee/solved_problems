int dp[51][51][51];
    int helper(vector<vector<int>>& grid,int r1,int c1,int c2)
    {
        int r2=r1+c1-c2;
        int n=grid.size();
        if(r1>=n || c1>=n || c2>= n || r2>=n || grid[r1][c1]==-1||grid[r2][c2]==-1)
            return INT_MIN;
        if(dp[r1][c1][c2]!=-1)
            return dp[r1][c1][c2];
        if(r1==n-1 && c1==n-1)
            return grid[r1][c1];
        int ans=grid[r1][c1];
        if(c1!=c2)
            ans+=grid[r2][c2];
        int temp=max(helper(grid,r1+1,c1,c2),helper(grid,r1+1,c1,c2+1));
        temp=max(temp,helper(grid,r1,c1+1,c2));
        temp=max(temp,helper(grid,r1,c1+1,c2+1));
        
        ans+=temp;
        dp[r1][c1][c2]=ans;
        return ans;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n=grid.size();
         memset(dp,-1,sizeof(dp));
        return max(0, helper(grid,0,0,0));
    }
